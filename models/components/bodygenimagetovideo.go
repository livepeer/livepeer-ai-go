// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/livepeer/livepeer-ai-go/internal/utils"
)

type BodyGenImageToVideoImage struct {
	FileName string `multipartForm:"name=image"`
	// This field accepts []byte data or io.Reader implementations, such as *os.File.
	Content any `multipartForm:"content"`
}

func (o *BodyGenImageToVideoImage) GetFileName() string {
	if o == nil {
		return ""
	}
	return o.FileName
}

func (o *BodyGenImageToVideoImage) GetContent() any {
	if o == nil {
		return nil
	}
	return o.Content
}

type BodyGenImageToVideo struct {
	// Uploaded image to generate a video from.
	Image BodyGenImageToVideoImage `multipartForm:"file"`
	// Hugging Face model ID used for video generation.
	ModelID *string `default:"" multipartForm:"name=model_id"`
	// The height in pixels of the generated video.
	Height *int64 `default:"576" multipartForm:"name=height"`
	// The width in pixels of the generated video.
	Width *int64 `default:"1024" multipartForm:"name=width"`
	// The frames per second of the generated video.
	Fps *int64 `default:"6" multipartForm:"name=fps"`
	// Used for conditioning the amount of motion for the generation. The higher the number the more motion will be in the video.
	MotionBucketID *int64 `default:"127" multipartForm:"name=motion_bucket_id"`
	// Amount of noise added to the conditioning image. Higher values reduce resemblance to the conditioning image and increase motion.
	NoiseAugStrength *float64 `default:"0.02" multipartForm:"name=noise_aug_strength"`
	// Perform a safety check to estimate if generated images could be offensive or harmful.
	SafetyCheck *bool `default:"true" multipartForm:"name=safety_check"`
	// Seed for random number generation.
	Seed *int64 `multipartForm:"name=seed"`
	// Number of denoising steps. More steps usually lead to higher quality images but slower inference. Modulated by strength.
	NumInferenceSteps *int64 `default:"25" multipartForm:"name=num_inference_steps"`
}

func (b BodyGenImageToVideo) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BodyGenImageToVideo) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *BodyGenImageToVideo) GetImage() BodyGenImageToVideoImage {
	if o == nil {
		return BodyGenImageToVideoImage{}
	}
	return o.Image
}

func (o *BodyGenImageToVideo) GetModelID() *string {
	if o == nil {
		return nil
	}
	return o.ModelID
}

func (o *BodyGenImageToVideo) GetHeight() *int64 {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *BodyGenImageToVideo) GetWidth() *int64 {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *BodyGenImageToVideo) GetFps() *int64 {
	if o == nil {
		return nil
	}
	return o.Fps
}

func (o *BodyGenImageToVideo) GetMotionBucketID() *int64 {
	if o == nil {
		return nil
	}
	return o.MotionBucketID
}

func (o *BodyGenImageToVideo) GetNoiseAugStrength() *float64 {
	if o == nil {
		return nil
	}
	return o.NoiseAugStrength
}

func (o *BodyGenImageToVideo) GetSafetyCheck() *bool {
	if o == nil {
		return nil
	}
	return o.SafetyCheck
}

func (o *BodyGenImageToVideo) GetSeed() *int64 {
	if o == nil {
		return nil
	}
	return o.Seed
}

func (o *BodyGenImageToVideo) GetNumInferenceSteps() *int64 {
	if o == nil {
		return nil
	}
	return o.NumInferenceSteps
}
