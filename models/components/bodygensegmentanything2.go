// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/livepeer/livepeer-ai-go/internal/utils"
)

type BodyGenSegmentAnything2Image struct {
	FileName string `multipartForm:"name=image"`
	// This field accepts []byte data or io.Reader implementations, such as *os.File.
	Content any `multipartForm:"content"`
}

func (o *BodyGenSegmentAnything2Image) GetFileName() string {
	if o == nil {
		return ""
	}
	return o.FileName
}

func (o *BodyGenSegmentAnything2Image) GetContent() any {
	if o == nil {
		return nil
	}
	return o.Content
}

type BodyGenSegmentAnything2 struct {
	// Image to segment.
	Image BodyGenSegmentAnything2Image `multipartForm:"file"`
	// Hugging Face model ID used for image generation.
	ModelID *string `default:"" multipartForm:"name=model_id"`
	// Nx2 array of point prompts to the model, where each point is in (X,Y) in pixels.
	PointCoords *string `multipartForm:"name=point_coords"`
	// Labels for the point prompts, where 1 indicates a foreground point and 0 indicates a background point.
	PointLabels *string `multipartForm:"name=point_labels"`
	// A length 4 array given as a box prompt to the model, in XYXY format.
	Box *string `multipartForm:"name=box"`
	// A low-resolution mask input to the model, typically from a previous prediction iteration, with the form 1xHxW (H=W=256 for SAM).
	MaskInput *string `multipartForm:"name=mask_input"`
	// If true, the model will return three masks for ambiguous input prompts, often producing better masks than a single prediction.
	MultimaskOutput *bool `default:"true" multipartForm:"name=multimask_output"`
	// If true, returns un-thresholded mask logits instead of a binary mask.
	ReturnLogits *bool `default:"true" multipartForm:"name=return_logits"`
	// If true, the point coordinates will be normalized to the range [0,1], with point_coords expected to be with respect to image dimensions.
	NormalizeCoords *bool `default:"true" multipartForm:"name=normalize_coords"`
}

func (b BodyGenSegmentAnything2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BodyGenSegmentAnything2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *BodyGenSegmentAnything2) GetImage() BodyGenSegmentAnything2Image {
	if o == nil {
		return BodyGenSegmentAnything2Image{}
	}
	return o.Image
}

func (o *BodyGenSegmentAnything2) GetModelID() *string {
	if o == nil {
		return nil
	}
	return o.ModelID
}

func (o *BodyGenSegmentAnything2) GetPointCoords() *string {
	if o == nil {
		return nil
	}
	return o.PointCoords
}

func (o *BodyGenSegmentAnything2) GetPointLabels() *string {
	if o == nil {
		return nil
	}
	return o.PointLabels
}

func (o *BodyGenSegmentAnything2) GetBox() *string {
	if o == nil {
		return nil
	}
	return o.Box
}

func (o *BodyGenSegmentAnything2) GetMaskInput() *string {
	if o == nil {
		return nil
	}
	return o.MaskInput
}

func (o *BodyGenSegmentAnything2) GetMultimaskOutput() *bool {
	if o == nil {
		return nil
	}
	return o.MultimaskOutput
}

func (o *BodyGenSegmentAnything2) GetReturnLogits() *bool {
	if o == nil {
		return nil
	}
	return o.ReturnLogits
}

func (o *BodyGenSegmentAnything2) GetNormalizeCoords() *bool {
	if o == nil {
		return nil
	}
	return o.NormalizeCoords
}
