// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/livepeer/livepeer-ai-go/internal/utils"
)

type Audio struct {
	FileName string `multipartForm:"name=fileName"`
	// This field accepts []byte data or io.Reader implementations, such as *os.File.
	Content any `multipartForm:"content"`
}

func (o *Audio) GetFileName() string {
	if o == nil {
		return ""
	}
	return o.FileName
}

func (o *Audio) GetContent() any {
	if o == nil {
		return nil
	}
	return o.Content
}

type BodyGenAudioToText struct {
	// Uploaded audio file to be transcribed.
	Audio Audio `multipartForm:"file,name=audio"`
	// Hugging Face model ID used for transcription.
	ModelID *string `default:"" multipartForm:"name=model_id"`
	// Return timestamps for the transcribed text. Supported values: 'sentence', 'word', or a string boolean ('true' or 'false'). Default is 'true' ('sentence'). 'false' means no timestamps. 'word' means word-based timestamps.
	ReturnTimestamps *string `default:"true" multipartForm:"name=return_timestamps"`
}

func (b BodyGenAudioToText) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BodyGenAudioToText) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *BodyGenAudioToText) GetAudio() Audio {
	if o == nil {
		return Audio{}
	}
	return o.Audio
}

func (o *BodyGenAudioToText) GetModelID() *string {
	if o == nil {
		return nil
	}
	return o.ModelID
}

func (o *BodyGenAudioToText) GetReturnTimestamps() *string {
	if o == nil {
		return nil
	}
	return o.ReturnTimestamps
}
