overlay: 1.0.0
info:
  title: CodeSamples overlay for go target
  version: 0.0.0
actions:
  - target: $["paths"]["/audio-to-text"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: genAudioToText
          source: |-
            package main

            import(
            	livepeeraigo "github.com/livepeer/livepeer-ai-go"
            	"os"
            	"context"
            	"github.com/livepeer/livepeer-ai-go/models/components"
            	"log"
            )

            func main() {
                s := livepeeraigo.New(
                    livepeeraigo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )

                content, fileErr := os.Open("example.file")
                if fileErr != nil {
                    panic(fileErr)
                }

                ctx := context.Background()
                res, err := s.Generate.AudioToText(ctx, components.BodyGenAudioToText{
                    Audio: components.Audio{
                        FileName: "example.file",
                        Content: content,
                    },
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.TextResponse != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/image-to-image"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: genImageToImage
          source: |-
            package main

            import(
            	livepeeraigo "github.com/livepeer/livepeer-ai-go"
            	"os"
            	"context"
            	"github.com/livepeer/livepeer-ai-go/models/components"
            	"log"
            )

            func main() {
                s := livepeeraigo.New(
                    livepeeraigo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )

                content, fileErr := os.Open("example.file")
                if fileErr != nil {
                    panic(fileErr)
                }

                ctx := context.Background()
                res, err := s.Generate.ImageToImage(ctx, components.BodyGenImageToImage{
                    Prompt: "<value>",
                    Image: components.Image{
                        FileName: "example.file",
                        Content: content,
                    },
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.ImageResponse != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/image-to-video"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: genImageToVideo
          source: |-
            package main

            import(
            	livepeeraigo "github.com/livepeer/livepeer-ai-go"
            	"os"
            	"context"
            	"github.com/livepeer/livepeer-ai-go/models/components"
            	"log"
            )

            func main() {
                s := livepeeraigo.New(
                    livepeeraigo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )

                content, fileErr := os.Open("example.file")
                if fileErr != nil {
                    panic(fileErr)
                }

                ctx := context.Background()
                res, err := s.Generate.ImageToVideo(ctx, components.BodyGenImageToVideo{
                    Image: components.BodyGenImageToVideoImage{
                        FileName: "example.file",
                        Content: content,
                    },
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.VideoResponse != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/llm"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: genLLM
          source: |-
            package main

            import(
            	livepeeraigo "github.com/livepeer/livepeer-ai-go"
            	"context"
            	"github.com/livepeer/livepeer-ai-go/models/components"
            	"log"
            )

            func main() {
                s := livepeeraigo.New(
                    livepeeraigo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Generate.Llm(ctx, components.BodyGenLLM{
                    Prompt: "<value>",
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.LLMResponse != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/segment-anything-2"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: genSegmentAnything2
          source: |-
            package main

            import(
            	livepeeraigo "github.com/livepeer/livepeer-ai-go"
            	"os"
            	"context"
            	"github.com/livepeer/livepeer-ai-go/models/components"
            	"log"
            )

            func main() {
                s := livepeeraigo.New(
                    livepeeraigo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )

                content, fileErr := os.Open("example.file")
                if fileErr != nil {
                    panic(fileErr)
                }

                ctx := context.Background()
                res, err := s.Generate.SegmentAnything2(ctx, components.BodyGenSegmentAnything2{
                    Image: components.BodyGenSegmentAnything2Image{
                        FileName: "example.file",
                        Content: content,
                    },
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.MasksResponse != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/text-to-image"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: genTextToImage
          source: |-
            package main

            import(
            	livepeeraigo "github.com/livepeer/livepeer-ai-go"
            	"context"
            	"github.com/livepeer/livepeer-ai-go/models/components"
            	"log"
            )

            func main() {
                s := livepeeraigo.New(
                    livepeeraigo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Generate.TextToImage(ctx, components.TextToImageParams{
                    Prompt: "<value>",
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.ImageResponse != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/upscale"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: genUpscale
          source: |-
            package main

            import(
            	livepeeraigo "github.com/livepeer/livepeer-ai-go"
            	"os"
            	"context"
            	"github.com/livepeer/livepeer-ai-go/models/components"
            	"log"
            )

            func main() {
                s := livepeeraigo.New(
                    livepeeraigo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )

                content, fileErr := os.Open("example.file")
                if fileErr != nil {
                    panic(fileErr)
                }

                ctx := context.Background()
                res, err := s.Generate.Upscale(ctx, components.BodyGenUpscale{
                    Prompt: "<value>",
                    Image: components.BodyGenUpscaleImage{
                        FileName: "example.file",
                        Content: content,
                    },
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.ImageResponse != nil {
                    // handle response
                }
            }
