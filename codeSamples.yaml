overlay: 1.0.0
info:
  title: CodeSamples overlay for go target
  version: 0.0.0
actions:
  - target: $["paths"]["/text-to-image"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: text_to_image
          source: |-
            package main

            import(
            	livepeeraigo "github.com/livepeer/livepeer-ai-go"
            	"github.com/livepeer/livepeer-ai-go/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := livepeeraigo.New(
                    livepeeraigo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                request := components.TextToImageParams{
                    Prompt: "<value>",
                }
                ctx := context.Background()
                res, err := s.TextToImage(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.ImageResponse != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/image-to-image"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: image_to_image
          source: |-
            package main

            import(
            	livepeeraigo "github.com/livepeer/livepeer-ai-go"
            	"github.com/livepeer/livepeer-ai-go/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := livepeeraigo.New(
                    livepeeraigo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                request := components.BodyImageToImageImageToImagePost{
                    Prompt: "<value>",
                    Image: components.Image{
                        FileName: "your_file_here",
                        Content: os.Open("<file_path>"),
                    },
                }
                ctx := context.Background()
                res, err := s.ImageToImage(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.ImageResponse != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/image-to-video"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: image_to_video
          source: |-
            package main

            import(
            	livepeeraigo "github.com/livepeer/livepeer-ai-go"
            	"github.com/livepeer/livepeer-ai-go/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := livepeeraigo.New(
                    livepeeraigo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                request := components.BodyImageToVideoImageToVideoPost{
                    Image: components.BodyImageToVideoImageToVideoPostImage{
                        FileName: "your_file_here",
                        Content: os.Open("<file_path>"),
                    },
                }
                ctx := context.Background()
                res, err := s.ImageToVideo(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.VideoResponse != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/upscale"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: upscale
          source: |-
            package main

            import(
            	livepeeraigo "github.com/livepeer/livepeer-ai-go"
            	"github.com/livepeer/livepeer-ai-go/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := livepeeraigo.New(
                    livepeeraigo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                request := components.BodyUpscaleUpscalePost{
                    Prompt: "<value>",
                    Image: components.BodyUpscaleUpscalePostImage{
                        FileName: "your_file_here",
                        Content: os.Open("<file_path>"),
                    },
                }
                ctx := context.Background()
                res, err := s.Upscale(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.ImageResponse != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/audio-to-text"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: audio_to_text
          source: |-
            package main

            import(
            	livepeeraigo "github.com/livepeer/livepeer-ai-go"
            	"github.com/livepeer/livepeer-ai-go/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := livepeeraigo.New(
                    livepeeraigo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                request := components.BodyAudioToTextAudioToTextPost{
                    Audio: components.Audio{
                        FileName: "your_file_here",
                        Content: os.Open("<file_path>"),
                    },
                }
                ctx := context.Background()
                res, err := s.AudioToText(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.TextResponse != nil {
                    // handle response
                }
            }
